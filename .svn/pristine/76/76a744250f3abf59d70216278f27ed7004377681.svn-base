/*
 * TCSS 305 Winter 2016
 * PowerPaint part A
 */

package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Line2D;
import java.util.ArrayList;

import javax.swing.JPanel;
import tools.PencilListener;
import tools.Tools;
/**
 * This class creates a blank canvas so that the cursor
 * may draw a single line onto the canvas. Only one line 
 * may be drawn at a time for the moment. This occurs by
 * creating mouseListeners, to catch mouse motion and 
 * get the points, so graphics2D can be implemented. 
 * 
 * @author Shema Rezanejad
 * @version 1
 *
 */


public final class DrawingPanel extends JPanel {
    /** Serial version UID.*/
    private static final long serialVersionUID = 2302812257149047261L;
    /** The default width value. */
    private static final int WIDTH = 500; 
    
    /** The default height value. */
    private static final int HEIGHT = 400;
    
    /** The minimum size this component should be. */
    private static final Dimension MIN_SIZE = new Dimension(WIDTH, HEIGHT);
    
    /** Setting stroke thickness. */
    private static final int STROKE_THICKNESS = 5;
    
    /** UW color number 1. */
    private static final int UW_COLOR1 = 51;
    
    /** UW color number 2. */
    private static final int UW_COLOR2 = 111;
    
    /** Setting start point of line. */
    private Point myStartPoint;
    
    /** Setting end point of line. */
    private Point myEndPoint;
    
    private Graphics2D myG2d;
    private boolean myCanvas;
    
    private boolean mySquareCircle;
    
    public Tools myCurrentTool;
    
    
    private Shape myCurrentShape;
    
    private Color myPenColor;
    private int myPenThickness;
    
    private MyShape myShape;
    
   
  //  private ArrayList<Shape> myShapesList;
    private ArrayList<MyShape> myShapesList;
    
    /**
     * Empty constructor. Simply calls the 
     * setup components.
     */
    public DrawingPanel() {
        super();
        setUpComponents();
        myCanvas = false;
       // this.myToolList = new ToolBar();
        myShapesList = new ArrayList<MyShape>();
      //  myCurrentShape = new PencilListener().drawShapes(myStartPoint, myEndPoint);
      //  myShape = new MyShape(this, myCurrentShape, myPenColor, myPenThickness);
        myCurrentTool = new PencilListener();
        
        myPenColor = new Color(UW_COLOR1, 0, UW_COLOR2); 
        myPenThickness = STROKE_THICKNESS;

    }
    public boolean checkMyCanvas() {
        return myCanvas;
    }
    public Tools getMyCurrentTool() {
        return myCurrentTool;
    }
    public void setMyCurrentTool( Tools theCurrentTool) {
        this.myCurrentTool = theCurrentTool;
    }
    
    /**
     * Sets cursor to Cross hair for drawing. Calls
     * mouse Listener method. Initializes the start and
     * end points.
     */
    private void setUpComponents() {
        setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        mouseListeners();
        myStartPoint = new Point(0,0);
        myEndPoint = new Point(0,0);
         
        

    }
    public void clear() {
        myShapesList.clear();
    }
    public void setCurrentShape(Shape theShape) {
        this.myCurrentShape = theShape;
    }
    @Override
    public Dimension getMinimumSize() {
        return MIN_SIZE;
    }
 
    @Override
    public Dimension getPreferredSize() {
        return MIN_SIZE;
    }
    public void addShapes() {
     // System.out.println(myPenThickness);
        myShape = new MyShape(this, myCurrentShape, myPenColor, myPenThickness);
        if(myCurrentTool == null) {
            setMyCurrentTool(new PencilListener());
        }
        
      //  myShapesList.add(myShape);
    }
    public void setTheStroke(int theWidth) {
        
        this.myPenThickness = theWidth;
      //  System.out.println(this.myPenThickness.hashCode());
      //  myShape.setCurrentThickness(theWidth);
    }
    public int getTheStroke() {
        return myPenThickness;
    }
    
    public void setCurrentColor(final Color theColor) {
        this.myPenColor = theColor;
    }
    public void setSquareCircle(final boolean theTruth) {
        this.mySquareCircle = theTruth;
    }
    public boolean getCanvasTruth() {
        return myCanvas;
    }
    public int getList() {
     //   System.out.println(myShapesList.size());
        return myShapesList.size();
    }

    @Override
   public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        setBackground(Color.WHITE);
        myG2d = (Graphics2D) theGraphics;
        
        myG2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                             RenderingHints.VALUE_ANTIALIAS_ON);
        if(myShapesList.size() > 2) {
           
            System.out.println("come Here");
        }
        if (myCanvas) {
            addShapes();
            for (final MyShape t: myShapesList) {
                myG2d.setPaint(t.getCurrentColor());
                //System.out.println(");
                myG2d.setStroke(new BasicStroke(t.getStroke())); 
               // System.out.println(getTheStroke());
                myG2d.draw(t.getShape()); 
            }
            
        }
    }
    


    /**
     * Method for mouseListeners. I chose to create anonymous 
     * inner classes to implement my mouseListeners. I chose to
     * do it this way because it is faster, easier, and cleaner code.
     * I chose to put the listeners in a different method because I felt 
     * as though it would look nicer, and would organize my code. 
     */
    private void mouseListeners() {
        this.addMouseListener(new MouseAdapter() {
            
            @Override
            public void mousePressed(final MouseEvent theEvent) {
                myCanvas = true;
                myStartPoint = theEvent.getPoint();
                myEndPoint = myStartPoint;
                myCurrentShape = myCurrentTool.drawShapes(myStartPoint, myEndPoint);
                myShape.setCurrentShape(myCurrentShape);
                myShapesList.add(myShape);
                repaint();
            }
            @Override
            public void mouseReleased(final MouseEvent theEvent) {
                myCanvas = true;
                myCurrentShape = getMyCurrentTool().getShape();
                myShape.setCurrentShape(myCurrentShape);
                myShapesList.add(myShape);
                repaint();
            }
        });

        this.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(final MouseEvent theEvent) {
                myCanvas = true;
                myEndPoint = theEvent.getPoint();

                myCurrentShape = getMyCurrentTool().moveShape(myStartPoint, myEndPoint);
                myStartPoint = myEndPoint;
                repaint();
                

            }
        });
        

    }
    
}
